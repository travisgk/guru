#version 330 core
#define N_DIR_LIGHTS 1
#define N_POINT_LIGHTS 1

layout (location = 0) in vec3 attr_pos;
layout (location = 1) in vec2 attr_uv;
layout (location = 2) in vec3 attr_normal;
layout (location = 3) in vec3 attr_tangent;
layout (location = 4) in vec3 attr_bitangent;

out Shared {
	vec2 tex_coords;
	vec3 tangent_view_pos;
	vec3 tangent_frag_pos;
	vec3 tangent_view_frag_diff;
	vec3 tangent_dir_light_raw_dirs[N_DIR_LIGHTS];
	vec3 tangent_point_light_pos[N_POINT_LIGHTS];
	vec3 tangent_point_light_raw_dirs[N_POINT_LIGHTS];
} vs_out;

uniform mat4 _PVM_mat;
uniform mat4 _model_mat;
uniform vec3 _view_pos;
uniform vec3 _dir_light_dirs[N_DIR_LIGHTS];
uniform vec3 _point_light_pos[N_POINT_LIGHTS];


void main() {
	vec3 frag_pos = vec3(_model_mat * vec4(attr_pos, 1.0));
	vs_out.tex_coords = attr_uv;
	
	// creates the matrix that translates to tangent space.
	mat3 normal_mat = transpose(inverse(mat3(_model_mat)));
	vec3 T = normalize(normal_mat * attr_tangent);
	vec3 B = normalize(normal_mat * attr_bitangent);
	vec3 N = normalize(normal_mat * attr_normal);
	mat3 TBN = transpose(mat3(T, B, N));
	

	/* pointlight
	vec3 halfway_dir = normalize(
			light_dir + fs_in.tangent_view_dir
		); // UNCERTAIN: move to v_shader
	*/
	
	// translates relevant lighting variables to tangent space.
	vs_out.tangent_view_pos = TBN * _view_pos;
	vs_out.tangent_frag_pos = TBN * frag_pos;
	vs_out.tangent_view_frag_diff = vs_out.tangent_view_pos - vs_out.tangent_frag_pos;
	
	for (int i = 0; i < N_DIR_LIGHTS; ++i) {
		vs_out.tangent_dir_light_raw_dirs[i] = -(TBN * _dir_light_dirs[i]);
	}
	
	for (int i = 0; i < N_POINT_LIGHTS; ++i) {
		vs_out.tangent_point_light_pos[i] = TBN * _point_light_pos[i];
		vs_out.tangent_point_light_raw_dirs[i] = (
			vs_out.tangent_point_light_pos[i] - vs_out.tangent_frag_pos
		);
	}
	
	gl_Position = _PVM_mat * vec4(attr_pos, 1.0);
}