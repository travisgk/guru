#version 430 core
#define N_POINT_LIGHTS 1

struct PointLight {
	vec3 diffuse;
	vec3 specular;
	float constant;
	float linear;
	float quadratic;
};

in Shared {
	vec3 frag_pos;
	vec2 tex_coords;
	vec3 tangent_view_pos;
	vec3 tangent_frag_pos;
	vec3 tangent_point_light_pos[N_POINT_LIGHTS];
} fs_in;

out vec4 FragColor;

uniform sampler2D _diffuse_texture_ID;
uniform sampler2D _normal_texture_ID;
uniform sampler2D _specular_texture_ID;
uniform PointLight _point_lights[N_POINT_LIGHTS];

void main() {
	vec3 normal = texture(_normal_texture_ID, fs_in.tex_coords).rgb;
	normal = normalize(normal * 2.0 - 1.0);
	
	// gets diffuse color. transparency not used at this moment.
	vec3 diff_rgb = texture(_diffuse_texture_ID, fs_in.tex_coords).rgb;
	vec3 spec_rgb = texture(_specular_texture_ID, fs_in.tex_coords).rgb;
	
	vec3 rgb_result = vec3(0.0, 0.0, 0.0);
	for (int i = 0; i < N_POINT_LIGHTS; ++i) {
		// diffuse
		vec3 light_dir = normalize(
			fs_in.tangent_point_light_pos[i] - fs_in.tangent_frag_pos
		);
		float diff = max(dot(normal, light_dir), 0.0);
		
		// specular
		vec3 view_dir = normalize(
			fs_in.tangent_view_pos - fs_in.tangent_frag_pos
		);
		vec3 reflect_dir = reflect(-light_dir, normal);
		vec3 halfway_dir = normalize(light_dir + view_dir);
		
		float distance = length(
			fs_in.tangent_point_light_pos[0] - fs_in.tangent_frag_pos
		);
		float attenuation = 1.0 / (
			  _point_lights[i].constant 
			+ _point_lights[i].linear * distance 
			+ _point_lights[i].quadratic * (distance * distance)
		);
		
		float spec = pow(max(dot(normal, halfway_dir), 0.0), 32.0);
		vec3 diffuse =  _point_lights[i].diffuse * diff * diff_rgb;
		vec3 specular = _point_lights[i].specular * spec * spec_rgb;
		
		rgb_result += diffuse * attenuation + specular * attenuation;
	}
	
	FragColor = vec4(rgb_result, 1.0);
}